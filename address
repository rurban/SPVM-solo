./sperl_dumper.c:      SPerl_MY_VAR* my_var = op_my_var->uv.my_var;
./sperl_dumper.c:    printf("        name => \"%s\"\n", my_var->op_name->uv.name);
./sperl_dumper.c:    SPerl_TYPE* type = my_var->op_type->uv.type;
./sperl_bytecode_builder.c:  SPerl_MY_VAR* my_var = var->op_my_var->uv.my_var;
./sperl_bytecode_builder.c:    if (my_var->address > 0xFF || (value < -128 || value > 127)) {
./sperl_bytecode_builder.c:      SPerl_BYTECODE_ARRAY_push(bytecode_array, (my_var->address >> 8) & 0xFF);
./sperl_bytecode_builder.c:      SPerl_BYTECODE_ARRAY_push(bytecode_array, my_var->address & 0xFF);
./sperl_bytecode_builder.c:      SPerl_BYTECODE_ARRAY_push(bytecode_array, my_var->address);
./sperl_bytecode_builder.c:  int32_t my_var_pos = var->op_my_var->uv.my_var->address;
./sperl_bytecode_builder.c:                  int32_t my_var_pos = op_var->uv.var->op_my_var->uv.my_var->address;
./sperl_op.c:      if (var->op_my_var->uv.my_var->op_type) {
./sperl_op.c:        resolved_type = var->op_my_var->uv.my_var->op_type->uv.type->resolved_type;
./sperl_op.c:      resolved_type = my_var->op_type->uv.type->resolved_type;
./sperl_op.c:    const char* package_name = name_info->op_var->uv.var->op_my_var->uv.my_var->op_type->uv.type->resolved_type->name;
./sperl_op.c:  const char* package_name = name_info->op_var->uv.var->op_my_var->uv.my_var->op_type->uv.type->resolved_type->name;
./sperl_op.c:  SPerl_OP* op_stab = SPerl_OP_newOP(sperl, SPerl_OP_C_CODE_NULL, op_my_var->file, op_my_var->line);
./sperl_op.c:  my_var->op_type = op_type;
./sperl_op.c:  my_var->op_name = op_name;
./sperl_op.c:  op_my_var->uv.my_var = my_var;
./sperl_op.c:    SPerl_OP* op_assign = SPerl_OP_newOP(sperl, SPerl_OP_C_CODE_ASSIGN, op_my_var->file, op_my_var->line);
./sperl_op.c:    my_var->op_term_assumption = op_term;
./sperl_op.c:    SPerl_yyerror_format(sperl, "\"my %s\" can't detect type at %s line %d\n", my_var->op_name->uv.name, op_my_var->file, op_my_var->line);
./sperl_op_checker.c:                  SPerl_MY_VAR* my_var = op_var->uv.var->op_my_var->uv.my_var;
./sperl_op_checker.c:                  SPerl_RESOLVED_TYPE* resolved_type = SPerl_OP_get_resolved_type(sperl, my_var->op_term_assumption);
./sperl_op_checker.c:                    my_var->op_type = op_type;
./sperl_op_checker.c:                  SPerl_MY_VAR* bef_my_var = op_bef_my_var->uv.my_var;
./sperl_op_checker.c:                  if (strcmp(my_var->op_name->uv.name, bef_my_var->op_name->uv.name) == 0) {
./sperl_op_checker.c:                  SPerl_yyerror_format(sperl, "redeclaration of my \"%s\" at %s line %d\n", my_var->op_name->uv.name, op_cur->file, op_cur->line);
./sperl_op_checker.c:                  SPerl_yyerror_format(sperl, "too many lexical variables, my \"%s\" ignored at %s line %d\n", my_var->op_name->uv.name, op_cur->file, op_cur->line);
./sperl_op_checker.c:        SPerl_MY_VAR* my_var = op_my_var->uv.my_var;
./sperl_op_checker.c:        SPerl_RESOLVED_TYPE* resolved_type = my_var->op_type->uv.type->resolved_type;
./sperl_op_checker.c:        my_var->address = next_my_var_address;
