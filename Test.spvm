use Test::EnumA;
use Test::EnumB;
use Test::EnumC;
use Test::Simple;
use Test::Minimal;
use String;

package Test {
  sub main($mvar : int) : int {
    # String
    {
      my $str = malloc String;
    }
    # get and set field
    {
      my $m = malloc Test::Minimal;
      
      $m{x} = 2;
      $m{y} = 3;
      
      std::printi($m{x});
      std::printi($m{y});
    }
    
    # increment long value
    {
      my $var : long = 4;
      $var++;
      $var--;
      --$var;
      ++$var;
    }
    
    if (1) {
      2;
      if (3) {
        4;
      }
      elsif (8) {
        9;
      }
      else {
        5;
      }
    }
    else {
      6;
    }
    7;
    
    std::printi(sum0(1, 1));
    std::printi(sum1(1, 2));
    
    std::printi(sum2(1, 2));

    # Constant float
    std::printf(1F);
    std::printf(0f);
    std::printf(1f);
    std::printf(2f);
    std::printf(1.2f);
    
    # Constant double
    std::printd(1D);
    std::printd(0d);
    std::printd(1d);
    std::printd(1.2);
    
    # Constant long
    std::printl(0l);
    std::printl(-1L);
    std::printl(0L);
    std::printl(1L);
    std::printl(2L);
    std::printl(9223372036854775807L);
    std::printl(-9223372036854775808L);
    
    # Constant int
    std::printi(-2147483648);
    std::printi(-32769);
    std::printi(-32768);
    std::printi(-129);
    std::printi(-128);
    std::printi(-2);
    std::printi(-1);
    std::printi(0);
    std::printi(1);
    std::printi(2);
    std::printi(3);
    std::printi(4);
    std::printi(5);
    std::printi(6);
    std::printi(127);
    std::printi(128);
    std::printi(255);
    std::printi(256);
    std::printi(32767);
    std::printi(32768);
    std::printi(65535);
    std::printi(65536);
    std::printi(2147483647);
    
    std::printi(sum1(1, 2));
    std::printi(sum1(1, 5));
    
    "abc";
    my $num2 = 3;
    
    switch($num2) {
      case 1:
        std::printi(1);
      case 3:
        std::printi(2);
      case 5:
        std::printi(3);
      default:
        std::printi(5);
    }
    
    switch($num2) {
      case 1:
        std::printi(1);
      case 3:
        std::printi(2);
      case 10000:
        std::printi(2);
      default:
        std::printi(5);
    }
    
    die String->new("aaaaa");
    
    # my $num;
    # my $num1 = undef;
    
    my $num1 : int;
    $num1 = 5;
    
    my $num = 5;
    
    if (1) {
      3;
      if (2) {
        4;
      }
      5;
    }
    6;

    my $simple3 : Test::Simple = malloc Test::Simple;
    
    std::printi($simple3->get_x());
    $simple3->get_x;
    
    $simple3{y} = 2;
    $simple3{x};
    $simple3{y};

    my $simple2 : Test::Simple = malloc Test::Simple;
    
    if (1) { }
    if (1.5) { }
    if ($simple2) { }
    
    if (undef) {
    
    }
    
    if ($simple2 == undef) {
      
    }

    if (undef == $simple2) {
      
    }
    
    if (undef == undef) {
    
    }
    if (undef != undef) {
    
    }
    
    if (5 || 6) {
    
    }

    if (5 && 6) {
    
    }
    if (!1) {
    
    }
    
    if (1 > 2) {
      3;
      4;
    };
    5;

    if (1.2 > 2) {};
    if (1.2 >= 2) {};
    if (1.2 < 2) {};
    if (1.2 <= 2) {};

    if (1.2 == 1) { }
    if (1.2 != 2) { };

    if (1 > 2) {};
    if (1 >= 2) {};
    if (1 < 2) {};
    if (1 <= 2) {};

    if (1 == 1) { }
    if (1 != 2) { };

    [1, 2, 3];
    [[1, 2, 3], [1, 2, 3]];
    my $nums : int[] = malloc int[3];
    $nums[0] = 3;
    $nums[1] = 5;
    std::printi($nums[0]);
    std::printi($nums[1]);
    std::printi(@$nums);
   
    my $simple : Test::Simple = malloc Test::Simple;
    
    my $nums_length : int = @$nums;
    
    my $v1 : int;
    my $v2 : int;
    my $v3 : int;
    
    $v3 = $v2 = $v1 = 5;
    
    100;
    1000;
    1 << 2;
    1 >> 2;
    1 >>> 2;
    
    Test::EnumA::ONE();
    Test::EnumA::TWO();
    
    Test::EnumA->ONE();
    Test::EnumA->ONE;
    
    my $var : int = 4;
    $var++;
    $var--;
    --$var;
    ++$var;

    1 ^ 4;
    1 & 2;
    1 | 2;
    my $foo2 : int[];
    # $foo2[1] = 5;
    # $foo2[2];
    my $foo : int;
    $foo = 1;
    4 % 6;
    -3 + +2;
    3 - (1 + 2);
    5 + 19;
    1 / 3;
    1.2 / 3;
    1 * 2;
    1.2 * 4;
    1 + 2;
    1.2 + 3;
    1 - 2;
    1.2 - 3;
    
    if (1 > 2) {};
    if (1 >= 2) {};
    if (1 < 2) {};
    if (1 <= 2) {};

    if (1 == 1) { }
    if (1 != 2) { };
    1 = 1;
    1 - 4;

    1 | 2;

    1 & 3;

    # "abcde";
    # "";

    # _sum();
    # sum_foo();
    
    # $title[3];
    # $title[3] = 4;

    my $bar : double = (double)1;
    undef;
    
    Test::sum1(1, 2);
    sum1(1, 2);
    
    test1();
    
    while (1) {
      1;
      last;
    }
    
    # for (my $i : int = 0; $i < 5; $i = $i + 1) {
    #   1;
    #   last;
    #   next;
    # }
    
    return $mvar + 3;
  }
  
  sub test1 () : int {
    my $num0 = 1;
    my $num1 = 2;
    my $num2 = 3;
    my $num3 = 4;
    my $num4 = 5;
    
    return 0;
  }
  
  sub sum4($num1 : int, $num2 : int) : int {
    return $num1 + $num2;
  }
  
  sub sum3 ($simple : Test::Simple, $foo : int, $bar : float) : int {
    
    if (3) {
    
    }
    
    if (3) {
      1;
    }
    elsif (4) {
      4;
    }
    else {
      
    }

    if (3) {
      1;
    }
    elsif (4) {
      4;
    }
    elsif (5) {
    
    }
    else {
      
    }
    
    if (1) {
      
    }
    else {
      
    }
    
    return 2;
  }
  
  sub sum1 ($num1 : int, $num2 : int) : int {
    return $num1 + $num2;
  }
  sub sum0($num1 : int, $num2 : int) : int {
    return $num1 + $num2;
  }
  
  sub sum2 ($num1 : int, $num2 : int) : int {
    
    my $num3 = sum0($num1, $num2);
    
    return $num3 + 3;
  }
}