use Test::EnumA;
use Test::EnumB;
use Test::EnumC;
use Test::Minimal;
use Test::Simple;

package Test {
  sub main($mvar : int) : int {

    if (1) {
      2;
      if (3) {
        4;
      }
      elsif (8) {
        9;
      }
      else {
        5;
      }
    }
    else {
      6;
    }
    7;
    
    printi(sum0(1, 1));
    printi(sum1(1, 2));
    
    printi(sum2(1, 2));

    # Constant float
    printf(1F);
    printf(0f);
    printf(1f);
    printf(2f);
    printf(1.2f);
    
    # Constant double
    printd(1D);
    printd(0d);
    printd(1d);
    printd(1.2);
    
    # Constant long
    printl(0l);
    printl(-1L);
    printl(0L);
    printl(1L);
    printl(2L);
    printl(9223372036854775807L);
    printl(-9223372036854775808L);
    
    # Constant int
    printi(-2147483648);
    printi(-32769);
    printi(-32768);
    printi(-129);
    printi(-128);
    printi(-2);
    printi(-1);
    printi(0);
    printi(1);
    printi(2);
    printi(3);
    printi(4);
    printi(5);
    printi(6);
    printi(127);
    printi(128);
    printi(255);
    printi(256);
    printi(32767);
    printi(32768);
    printi(65535);
    printi(65536);
    printi(2147483647);
    
    printi(sum1(1, 2));
    printi(sum1(1, 5));
    
    "abc";
    my $num2 = 5;
    
    switch($num2) {
      case 1:
        1;
      case 3:
        2;
      case 5:
        3;
      default:
        5;
    }
    
    switch($num2) {
      case 1:
        1;
      case 3:
        2;
      case 10000:
        2;
      default:
        5;
    }
    
    die "aaaaa";
    
    # my $num;
    # my $num1 = undef;
    
    my $num1 : int;
    $num1 = 5;
    
    my $num = 5;
    
    if (1) {
      3;
      if (2) {
        4;
      }
      5;
    }
    6;

    my $simple3 : Test::Simple = new Test::Simple;
    
    $simple3->y = 2;
    $simple3->x;
    $simple3->y;

    my $simple2 : Test::Simple = new Test::Simple;

    return $mvar + 3;
  }
  
  sub test1 () : int {
    my $num0 = 1;
    my $num1 = 2;
    my $num2 = 3;
    my $num3 = 4;
    my $num4 = 5;
    
    return 0;
  }
  
  sub sum4($num1 : int, $num2 : int) : int {
    return $num1 + $num2;
  }
  
  sub sum3 ($simple : Test::Simple, $foo : int, $bar : float) : int {
    
    if (3) {
    
    }
    
    if (3) {
      1;
    }
    elsif (4) {
      4;
    }
    else {
      
    }

    if (3) {
      1;
    }
    elsif (4) {
      4;
    }
    elsif (5) {
    
    }
    else {
      
    }
    
    if (1) {
      
    }
    else {
      
    }
    
    return 2;
  }

  sub sum1 ($num1 : int, $num2 : int) : int {
    return $num1 + $num2;
  }
  sub sum0($num1 : int, $num2 : int) : int {
    return $num1 + $num2;
  }
  
  sub sum2 ($num1 : int, $num2 : int) : int {
    
    my $num3 = sum0($num1, $num2);
    
    return $num3 + 3;
  }
}
