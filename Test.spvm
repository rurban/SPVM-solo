use Test::EnumA;
use Test::EnumB;
use Test::EnumC;
use Test::Simple;
use Test::Minimal;

package Test {
  sub main($mvar : long) : long {
    std::printl(std::test_call1(4));

    # byte increment
    {
      my $num = (byte)1;
      $num++;
      std::printb($num);
    }

    # short increment
    {
      my $num = (short)1;
      $num++;
      std::prints($num);
    }
    
    try {
      sum1(1, 2);
      
      3;
      
      sum1(3, 4);
      
      1;
    } catch ($error : byte[]) {
      sum1(5, 6);
      2;
    }
    
    {
      my $nums = malloc long[3];
      $nums[0] = 1;
      $nums[1] = 2;
      $nums[2] = 3;
      
      my $total = std::suml($nums);
      std::printl($total);
    }

    {
      my $nums = "ace";
      
      std::println($nums);
    }
    
    {
      my $nums = "ace";
      
      std::printb($nums[2]);
    }
    
    {
      my $num = (byte)3;
      std::printb($num);
      
      my $num2 = 1 + (long)$num;
      
      std::printl($num2);
    }
    
    # get and set field
    {
      my $m = malloc Test::Minimal;
      
      $m{x} = 2;
      $m{y} = 3;
      
      std::printl($m{x});
      std::printl($m{y});
    }
    
    # increment long value
    {
      my $var : long = 4;
      $var++;
      $var--;
      --$var;
      ++$var;
    }
    
    if (1) {
      2;
      if (3) {
        4;
      }
      elsif (8) {
        9;
      }
      else {
        5;
      }
    }
    else {
      6;
    }
    7;
    
    std::printl(sum0(1, 1));
    std::printl(sum1(1, 2));
    
    std::printl(sum2(1, 2));

    # Constant float
    std::printf(0f);
    std::printf(1f);
    std::printf(2f);
    std::printf(1.2f);
    
    # Constant double
    std::printd(0d);
    std::printd(1d);
    std::printd(1.2);
    
    # Constant long
    std::printl(-1);
    std::printl(0);
    std::printl(1);
    std::printl(2);
    std::printl(9223372036854775807);
    std::printl(-9223372036854775808);
    std::printl(-2147483648);
    std::printl(-32769);
    std::printl(-32768);
    std::printl(-129);
    std::printl(-128);
    std::printl(-2);
    std::printl(-1);
    std::printl(0);
    std::printl(1);
    std::printl(2);
    std::printl(3);
    std::printl(4);
    std::printl(5);
    std::printl(6);
    std::printl(127);
    std::printl(128);
    std::printl(255);
    std::printl(256);
    std::printl(32767);
    std::printl(32768);
    std::printl(65535);
    std::printl(65536);
    std::printl(2147483647);
    
    # Constant int
    std::printi((int)-2147483648);
    std::printi((int)-32769);
    std::printi((int)-32768);
    std::printi((int)-129);
    std::printi((int)-128);
    std::printi((int)-2);
    std::printi((int)-1);
    std::printi((int)0);
    std::printi((int)1);
    std::printi((int)2);
    std::printi((int)3);
    std::printi((int)4);
    std::printi((int)5);
    std::printi((int)6);
    std::printi((int)127);
    std::printi((int)128);
    std::printi((int)255);
    std::printi((int)256);
    std::printi((int)32767);
    std::printi((int)32768);
    std::printi((int)65535);
    std::printi((int)65536);
    std::printi((int)2147483647);
    
    std::printl(sum1(1, 2));
    std::printl(sum1(1, 5));
    
    "abc";
    my $num2 = 3;
    
    switch($num2) {
      case 1:
        std::printl(1);
      case 3:
        std::printl(2);
      case 5:
        std::printl(3);
      default:
        std::printl(5);
    }
    
    switch($num2) {
      case 1:
        std::printl(1);
      case 3:
        std::printl(2);
      case 10000:
        std::printl(2);
      default:
        std::printl(5);
    }
    
    # my $num;
    # my $num1 = undef;
    
    my $num1 : int;
    $num1 = (int)5;
    
    my $num = 5;
    
    if (1) {
      3;
      if (2) {
        4;
      }
      5;
    }
    6;

    my $simple3 : Test::Simple = malloc Test::Simple;
    
    std::printl($simple3->get_x());
    $simple3->get_x;
    
    $simple3{y} = 2;
    $simple3{x};
    $simple3{y};

    my $simple2 : Test::Simple = malloc Test::Simple;
    
    if (1) { }
    if (1.5) { }
    if ($simple2) { }
    
    if (undef) {
    
    }
    
    if ($simple2 == undef) {
      
    }

    if (undef == $simple2) {
      
    }
    
    if (undef == undef) {
    
    }
    if (undef != undef) {
    
    }
    
    if (5 || 6) {
    
    }

    if (5 && 6) {
    
    }
    if (!1) {
    
    }
    
    if (1 > 2) {
      3;
      4;
    };
    5;

    if (1.2 > 2.0) {};
    if (1.2 >= 2.0) {};
    if (1.2 < 2.0) {};
    if (1.2 <= 2.0) {};

    if (1.2 == 1.0) { }
    if (1.2 != 2.0) { };

    if (1 > 2) {};
    if (1 >= 2) {};
    if (1 < 2) {};
    if (1 <= 2) {};

    if (1 == 1) { }
    if (1 != 2) { };

    {
      my $nums : long[] = malloc long[3];
      $nums[0] = 11;
      $nums[1] = 12;
      std::printl($nums[0]);
      std::printl($nums[1]);
      std::printl(@$nums);
      my $nums_length : long = @$nums;
    }

    {
      my $nums = malloc int[3];
      $nums[0] = (int)13;
      $nums[1] = (int)14;
      std::printi($nums[0]);
      std::printi($nums[1]);
    }
    
    my $simple : Test::Simple = malloc Test::Simple;
    
    
    my $v1 : long;
    my $v2 : long;
    my $v3 : long;
    
    $v3 = $v2 = $v1 = 5;
    
    100;
    1000;
    1 << 2;
    1 >> 2;
    1 >>> 2;
    
    Test::EnumA::ONE();
    Test::EnumA::TWO();
    
    Test::EnumA->ONE();
    Test::EnumA->ONE;
    
    my $var : long = 4;
    $var++;
    $var--;
    --$var;
    ++$var;

    1 ^ 4;
    1 & 2;
    1 | 2;
    my $foo2 : int[];
    # $foo2[1] = 5;
    # $foo2[2];
    my $foo : long;
    $foo = 1;
    4 % 6;
    -3 + +2;
    3 - (1 + 2);
    5 + 19;
    1 / 3;
    1.2 / 3.0;
    1.2f / 3.0f;
    1 * 2;
    1.2 * 4.0;
    1.2f * 4.0f;
    1 + 2;
    1.2 + 3.0;
    1.2f + 3.0f;
    1 - 2;
    1.2 - 3.0;
    1.2f - 3.0f;
    
    if (1 > 2) {};
    if (1 >= 2) {};
    if (1 < 2) {};
    if (1 <= 2) {};

    if (1 == 1) { }
    if (1 != 2) { };
    1 = 1;
    1 - 4;

    1 | 2;

    1 & 3;

    # "abcde";
    # "";

    # _sum();
    # sum_foo();
    
    # $title[3];
    # $title[3] = 4;

    my $bar : double = (double)1;
    undef;
    
    Test::sum1(1, 2);
    sum1(1, 2);
    
    test1();
    
    while (1) {
      1;
      last;
    }
    
    # for (my $i : int = 0; $i < 5; $i = $i + 1) {
    #   1;
    #   last;
    #   next;
    # }

    {
      my $num0 = (byte)0;
      my $num1 = (byte)1;
      my $num2 = (byte)2;
      my $num3 = $num0 + $num1 + $num2;
      std::printb($num3);
    }

    {
      my $num0 = (short)0;
      my $num1 = (short)1;
      my $num2 = (short)2;
      my $num3 = $num0 + $num1 + $num2;
      std::prints($num3);
    }


    # die "ERROR";
        
    return $mvar + 3;
  }
  
  sub test1 () : long {
    my $num0 = 1;
    my $num1 = 2;
    my $num2 = 3;
    my $num3 = 4;
    my $num4 = 5;
    
    return 0;
  }
  
  sub sum4($num1 : long, $num2 : long) : long {
    return $num1 + $num2;
  }
  
  sub sum3 ($simple : Test::Simple, $foo : long, $bar : float) : long {
    
    if (3) {
    
    }
    
    if (3) {
      1;
    }
    elsif (4) {
      4;
    }
    else {
      
    }

    if (3) {
      1;
    }
    elsif (4) {
      4;
    }
    elsif (5) {
    
    }
    else {
      
    }
    
    if (1) {
      
    }
    else {
      
    }

    return 2;
  }
  
  sub sum1 ($num1 : long, $num2 : long) : long {
    return $num1 + $num2;
  }
  sub sum0($num1 : long, $num2 : long) : long {
    return $num1 + $num2;
  }
  
  sub sum2 ($num1 : long, $num2 : long) : long {
    
    my $num3 = sum0($num1, $num2);
    
    return $num3 + 3;
  }
}