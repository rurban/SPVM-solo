use Test::EnumA;
use Test::EnumB;
use Test::EnumC;
use Test::EnumD;
use Test::Simple;
use Test::Minimal;

package Test {
  sub main($mvar : int) : int {
    std::printi(Test::EnumD->THREE);
    std::printi(Test::EnumD->FORE);

    std::printl(std::test_call1(4L));
    
    {
      my $string : string = "abc";
    }
    
    {
      my $strings : string[] = malloc string[5L];
      $strings[0L] = "abc";
      $strings[1L] = "ppp";
      
      std::println($strings[1L]);
    }
    
    {
      malloc Test::Minimal;
    }
    
    {
      my $obj1 = malloc Test::Minimal;
      
      my $obj2 : Test::Minimal;
      
      my $obj3 : Test::Minimal = undef;
    }

    # byte increment
    {
      my $num = (byte)1;
      $num++;
      std::printb($num);
    }

    # short increment
    {
      my $num = (short)1L;
      $num++;
      std::prints($num);
    }
    
    try {
      sum1(1L, 2L);
      
      3L;
      
      sum1(3L, 4L);
      
      1L;
    } catch ($error : byte[]) {
      sum1(5L, 6L);
      2L;
    }
    
    {
      my $nums = malloc long[3L];
      $nums[0L] = 1L;
      $nums[1L] = 2L;
      $nums[2L] = 3L;
      
      my $total = std::suml($nums);
      std::printl($total);
    }

    {
      my $string = "ace";
      
      std::println($string);
    }
    
    {
      my $num = (byte)3L;
      std::printb($num);
      
      my $num2 = 1L + (long)$num;
      
      std::printl($num2);
    }
    
    # get and set field
    {
      my $m = malloc Test::Minimal;
      
      $m{x} = 2L;
      $m{y} = 3L;
      
      std::printl($m{x});
      std::printl($m{y});
    }

    # Free when assignment
    {
      my $m = malloc Test::Minimal;
      $m = malloc Test::Minimal;
    }

    # left is object, right is undef
    {
      my $obj : Test::Minimal = undef;
    }
    
    
    # increment long value
    {
      my $var : long = 4L;
      $var++;
      $var--;
      --$var;
      ++$var;
    }
    
    if (1L) {
      2L;
      if (3L) {
        4L;
      }
      elsif (8L) {
        9L;
      }
      else {
        5L;
      }
    }
    else {
      6L;
    }
    7L;
    
    std::printl(sum0(1L, 1L));
    std::printl(sum1(1L, 2L));
    
    std::printl(sum2(1L, 2L));

    # Constant float
    std::printf(0.3f);
    std::printf(1f);
    std::printf(2f);
    std::printf(1.2f);
    
    # Constant double
    std::printd(0d);
    std::printd(1d);
    std::printd(1.2);
    
    # Constant long
    std::printl(-1L);
    std::printl(0L);
    std::printl(1L);
    std::printl(2L);
    std::printl(9223372036854775807L);
    std::printl(-9223372036854775807L);
    std::printl(-2147483648L);
    std::printl(-32769L);
    std::printl(-32768L);
    std::printl(-129L);
    std::printl(-128L);
    std::printl(-2L);
    std::printl(-1L);
    std::printl(0L);
    std::printl(1L);
    std::printl(2L);
    std::printl(3L);
    std::printl(4L);
    std::printl(5L);
    std::printl(6L);
    std::printl(127L);
    std::printl(128L);
    std::printl(255L);
    std::printl(256L);
    std::printl(32767L);
    std::printl(32768L);
    std::printl(65535L);
    std::printl(65536L);
    std::printl(2147483647L);
    std::printl(0xFFL);
    
    # Constant int
    std::printi((int)-2147483648);
    std::printi((int)-32769);
    std::printi((int)-32768);
    std::printi((int)-129);
    std::printi((int)-128);
    std::printi((int)-2);
    std::printi((int)-1);
    std::printi(0I);
    std::printi(1I);
    std::printi((int)2);
    std::printi((int)3);
    std::printi((int)4);
    std::printi((int)5);
    std::printi((int)6);
    std::printi((int)127);
    std::printi((int)128);
    std::printi((int)255);
    std::printi((int)256);
    std::printi((int)32767);
    std::printi((int)32768);
    std::printi((int)65535);
    std::printi((int)65536);
    std::printi((int)2147483647);
    
    std::printl(sum1(1L, 2L));
    std::printl(sum1(1L, 5L));
    
    "abc";
    
    # Table switch int
    {
      my $num = 3I;
      
      switch($num) {
        case Test::EnumD->THREE:
          std::printl(1L);
        case Test::EnumD->FORE:
          std::printl(2L);
        case 5I:
          std::printl(3L);
        default:
          std::printl(5L);
      }
    }

    # Lookup switch int
    {
      my $num = 3I;
      switch ($num) {
        case 1I:
          std::printl(1L);
        case 3I:
          std::printl(2L);
        case 10000I:
          std::printl(2L);
        default:
          std::printl(5L);
      }
    }
    
    # {
    #   my $num = 5L;
    #   switch($num) {
    #     default:
    #       std::printl(5L);
    #   }
    # }
    
    # my $num;
    # my $num1 = undef;
    
    my $num1 : int;
    $num1 = (int)5L;
    
    my $num = 5L;
    
    if (1L) {
      3L;
      if (2L) {
        4L;
      }
      5L;
    }
    6L;

    my $simple3 : Test::Simple = malloc Test::Simple;
    
    std::printl($simple3->get_x());
    $simple3->get_x;
    
    $simple3{y} = 2L;
    $simple3{x};
    $simple3{y};

    my $simple2 : Test::Simple = malloc Test::Simple;
    
    if ((int)1L) { }
    
    if ((int)1L == (int)1L) {
    
    }

    if ((int)1L != (int)1L) {
    
    }

    if ((int)1L <= (int)1L) {
    
    }

    if ((int)1L < (int)1L) {
    
    }

    if ((int)1L >= (int)1L) {
    
    }

    if ((int)1L > (int)1L) {
    
    }

    if (!(int)1L) { }
    
    if (1L) { }
    if (1.5) { }
    if ($simple2) { }
    
    if (undef) {
    
    }
    
    if ($simple2 == undef) {
      
    }

    if (undef == $simple2) {
      
    }
    
    if (undef == undef) {
    
    }
    if (undef != undef) {
    
    }
    
    if (5L || 6L) {
    
    }

    if (5L && 6L) {
    
    }
    if (!1L) {
    
    }
    
    if (1L > 2L) {
      3L;
      4L;
    };
    5L;

    if (1.2 > 2.0) {};
    if (1.2 >= 2.0) {};
    if (1.2 < 2.0) {};
    if (1.2 <= 2.0) {};

    if (1.2 == 1.0) { }
    if (1.2 != 2.0) { };

    if (1L > 2L) {};
    if (1L >= 2L) {};
    if (1L < 2L) {};
    if (1L <= 2L) {};

    if (1L == 1L) { }
    if (1L != 2L) { };

    {
      my $nums : long[] = malloc long[3L];
      $nums[0L] = 11L;
      $nums[1L] = 12L;
      std::printl($nums[0L]);
      std::printl($nums[1L]);
      std::printl(len $nums);
      my $nums_length : long = len $nums;
    }
    
    {
      my $nums = malloc int[3L];
      $nums[0L] = (int)13L;
      $nums[1L] = (int)14L;
      std::printi($nums[0L]);
      std::printi($nums[1L]);
    }
    
    my $simple : Test::Simple = malloc Test::Simple;
    
    
    my $v1 : long;
    my $v2 : long;
    my $v3 : long;
    
    $v3 = $v2 = $v1 = 5L;
    
    100L;
    1000L;
    1L << 2L;
    1L >> 2L;
    1L >>> 2L;
    
    Test::EnumA::ONE();
    Test::EnumA::TWO();
    
    Test::EnumA->ONE();
    Test::EnumA->ONE;
    
    my $var : long = 4L;
    $var++;
    $var--;
    --$var;
    ++$var;

    1L ^ 4L;
    1L & 2L;
    1L | 2L;
    my $foo2 : int[];
    # $foo2[1] = 5L;
    # $foo2[2];
    my $foo : long;
    $foo = 1L;
    4L % 6L;
    -3L + +2L;
    3L - (1L + 2L);
    5L + 19L;
    1L / 3L;
    1.2 / 3.0;
    1.2f / 3.0f;
    1L * 2L;
    1.2 * 4.0;
    1.2f * 4.0f;
    1L + 2L;
    1.2 + 3.0;
    1.2f + 3.0f;
    1L - 2L;
    1.2 - 3.0;
    1.2f - 3.0f;
    
    if (1L > 2L) {};
    if (1L >= 2L) {};
    if (1L < 2L) {};
    if (1L <= 2L) {};

    if (1L == 1L) { }
    if (1L != 2L) { };
    1L = 1L;
    1L - 4L;

    1L | 2L;

    1L & 3L;

    # "abcde";
    # "";

    # _sum();
    # sum_foo();
    
    # $title[3];
    # $title[3] = 4;

    my $bar : double = (double)1L;
    undef;
    
    Test::sum1(1L, 2L);
    sum1(1L, 2L);
    
    test1();
    
    while (1L) {
      1L;
      last;
    }
    
    # for (my $i : int = 0; $i < 5I; $i = $i + 1I) {
    #   1L;
    #   last;
    #   next;
    # }

    {
      my $num0 = (byte)0L;
      my $num1 = (byte)1L;
      my $num2 = (byte)2L;
      my $num3 = $num0 + $num1 + $num2;
      std::printb($num3);
    }

    {
      my $num0 = (short)0L;
      my $num1 = (short)1L;
      my $num2 = (short)2L;
      my $num3 = $num0 + $num1 + $num2;
      std::prints($num3);
    }


    # die "ERROR";
    
    return $mvar + 3;
  }
  
  sub test1 () : long {
    my $num0 = 1L;
    my $num1 = 2L;
    my $num2 = 3L;
    my $num3 = 4L;
    my $num4 = 5L;
    
    return 0L;
  }
  
  sub sum4($num1 : long, $num2 : long) : long {
    return $num1 + $num2;
  }
  
  sub sum3 ($simple : Test::Simple, $foo : long, $bar : float) : long {
    
    if (3L) {
    
    }
    
    if (3L) {
      1;
    }
    elsif (4L) {
      4;
    }
    else {
      
    }

    if (3L) {
      1;
    }
    elsif (4L) {
      4;
    }
    elsif (5L) {
    
    }
    else {
      
    }
    
    if (1L) {
      
    }
    else {
      
    }

    return 2L;
  }
  
  sub sum1 ($num1 : long, $num2 : long) : long {
    return $num1 + $num2;
  }
  sub sum0($num1 : int, $num2 : int) : int {
    return $num1 + $num2;
  }
  
  sub sum2 ($num1 : int, $num2 : int) : int {
    # die "Error";
    
    my $num3 = sum0($num1, $num2);
    
    return $num3 + 3;
  }

  sub increfcount($test : Test::Minimal, $num : int) : int {
    
    my $aaa = malloc Test::Minimal;
  }

  sub decinctest ($num1 : Test::Minimal, $num2 : int, $num3 : Test::Minimal) : int {
    {
      my $num4 = malloc Test::Minimal;
      my $num5 = malloc Test::Minimal;
    }
    return 2;
  }

  sub return_object() : Test::Minimal {
    my $obj0 = malloc Test::Minimal;
    {
      my $obj1 = malloc Test::Minimal;
      
      my $obj2 : Test::Minimal;
      
      my $obj3 : Test::Minimal = undef;

      return $obj2;
    }
  }

}
