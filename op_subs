./sperl_dumper.c:    SPerl_PACKAGE* package = op_package->uv.package;
./sperl_dumper.c:    printf("  name => \"%s\"\n", package->op_name->uv.name);
./sperl_dumper.c:    if (package->op_type) {
./sperl_dumper.c:      SPerl_TYPE* type = package->op_type->uv.type;
./sperl_dumper.c:    printf("  byte_size => %d\n", package->byte_size);
./sperl_dumper.c:    SPerl_ARRAY* op_fields = package->op_fields;
./sperl_dumper.c:    SPerl_ARRAY* op_subs = package->op_subs;
./sperl_dumper.c:    printf("    package_name => \"%s\"\n", sub->op_package->uv.package->op_name->uv.name);
./sperl_bytecode_builder.c:    for (size_t sub_pos = 0; sub_pos < package->op_subs->length; sub_pos++) {
./sperl_bytecode_builder.c:      SPerl_OP* op_sub = SPerl_ARRAY_fetch(package->op_subs, sub_pos);
./sperl_bytecode_builder.c:                  int32_t id = package->id;
./sperl_op.c:    SPerl_PACKAGE* package = op_package->uv.package;
./sperl_op.c:    SPerl_ARRAY* op_fields = package->op_fields;
./sperl_op.c:    package->byte_size = package_byte_size;
./sperl_op.c:    const char* package_name = op_package->uv.package->op_name->uv.name;
./sperl_op.c:    SPerl_yyerror_format(sperl, "redeclaration of package \"%s\" at %s line %d\n", package_name, op_package->file, op_package->line);
./sperl_op.c:    package->op_name = op_package_name;
./sperl_op.c:    package->op_type = op_type;
./sperl_op.c:    package->op_fields = op_fields;
./sperl_op.c:      SPerl_ARRAY_push(package->op_subs, op_sub);
./sperl_op.c:      warn("BBBBBBBBBBB %d", package->op_subs->length);
./sperl_op.c:    op_package->uv.package = package;
./sperl_op.c:    package->id = parser->op_packages->length;
./sperl_op.c:    warn("DDDDD %d", package->op_subs->length);
./sperl_op.c:    for (size_t sub_pos = 0; sub_pos < package->op_subs->length; sub_pos++) {
./sperl_package.c:  package->op_subs = SPerl_ALLOCATOR_new_array(sperl, 0);
./sperl_package.c:  package->op_fields = SPerl_ALLOCATOR_new_array(sperl, 0);
./sperl_op_checker.c:    for (size_t sub_pos = 0; sub_pos < package->op_subs->length; sub_pos++) {
./sperl_op_checker.c:      SPerl_OP* op_sub = SPerl_ARRAY_fetch(package->op_subs, sub_pos);
./sperl_vm.c:        SPerl_PACKAGE* package = op_package->uv.package;
./sperl_vm.c:        size_t allocation_size = package->byte_size;
./sperl_vm.c:          for (size_t sub_pos = 0; sub_pos < package->op_subs->length; sub_pos++) {
./sperl_vm.c:            SPerl_OP* op_sub = SPerl_ARRAY_fetch(package->op_subs, sub_pos);
